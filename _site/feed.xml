<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Coding Journey</title>
    <description>This blog is meant to document my personal experience of learning how to  code with no previous experience..
</description>
    <link>http://the-widget.github.io/</link>
    <atom:link href="http://the-widget.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 20 Jun 2016 13:26:26 -0400</pubDate>
    <lastBuildDate>Mon, 20 Jun 2016 13:26:26 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Why I Decided To Learn Web Development</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://cdn1.tekrevue.com/wp-content/uploads/2014/05/old-pc-windows-95.jpg&quot; alt=&quot;win-95&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;beginnings&quot;&gt;Beginnings&lt;/h2&gt;

&lt;p&gt;I remember waking up early in the morning, just as the sun tipped above the horizon and running upstairs to our box-shaped IBM computer with it’s companion, a bubble-curved glass monitor. After hearing the whir of the cooling fan and a few clicks and beeps, I was presented with a black screen with a blinking rectangle on the far left. With my little two-year-old fingers I would type out one key at a time. &lt;code class=&quot;highlighter-rouge&quot;&gt;cd:/ win&lt;/code&gt; Magically, the program would load and I would soon have full control over the cursor, allowing me to play Solitaire, Minesweeper, SkiFree and Oregon Trail.&lt;/p&gt;

&lt;h2 id=&quot;gaming&quot;&gt;Gaming&lt;/h2&gt;

&lt;p&gt;As gaming developed, my interest in computer technology developed along with it. My childhood experiences with computers felt as natural as running around outside, climbing trees, discovering bugs and plants, and playing games with my friends. In fact the computer, magical as it was, seemed to take on the persona of a friend with a mental handicap, or a very primitive robot. It couldn’t speak a word of English, nor could it understand me if I spoke to it and it had no idea who I was even though we spent years together in my house.&lt;/p&gt;

&lt;p&gt;Despite this, one aspect of the computer opened up another realm of experiences for me. Gaming. Games transformed the dull computer into an amazing storyteller, an adventurous companion and a friend who was always available. This aspect of the computer caused me to question the workings of this machine, and eventually led me to my uncle Bobby’s book, “C++ For Dummies”. At 9 years old it’s fair to say that my technical comprehension was pretty low and there was not much that I could grasp. Nonetheless I would read page after page and ask questions, gradually understanding the basics of computing, logic gates, and processors.&lt;/p&gt;

&lt;h2 id=&quot;fast-forward&quot;&gt;Fast Forward&lt;/h2&gt;

&lt;p&gt;After a few highschool restaurant jobs, five years of working in electronics on nuclear submarines, and a year working as a field technician at various powerplants, my desire for meaningful and interesting work was like a burning fire. I remember reading a quote by someone that said, “If you love your work, you’ll never work another day in your life.” My pursuit for a new and fulfilling career had begun and I started thinking about what I loved to do as a kid. Memories of my fascination with computers came back to me, and I remembered the C++ book that I picked up a long time ago. Besides building websites using AngelFire in 2002, I had never pursued any career or hobby in programming. Nonetheless, I had a strong feeling that if I started learning now I could find myself in a diverse job marketplace and that I would fit in somewhere.&lt;/p&gt;

&lt;h2 id=&quot;not-just-making-a-living&quot;&gt;Not Just Making A Living&lt;/h2&gt;

&lt;p&gt;The benefits of learning programming are many, but one of the main benefits that I like to consider is that it keeps your brain active in having to solve issues with creativity, community and research. Computer technology has found it’s way into practically every realm of our lives. Even avodacodos and pears have a code that is tied to a computer program which tracks the import/export, cost, quantity and much more information. Our DNA code is now being understood more and being sequenced by super computers, allowing us to soon manipulate the strings of life. Of course making a respectable wage is desirable, as well as being able to provide nicely for one’s family and children. But I feel that having interesting and exciting work can make be a happier father, a better husband and a more valuable contribution to society and the world.&lt;/p&gt;

&lt;h2 id=&quot;why-web-dev&quot;&gt;Why Web-dev?&lt;/h2&gt;

&lt;p&gt;As a fresh beginner, I need to be able to actively learn while I bring home the bread. Not being in a position to study at a university or pursue a college degree doesn’t have to limit my abilities in this regard. Thanks to &lt;a href=&quot;http://learn.co/with/the-widget&quot;&gt;Learn.co&lt;/a&gt;, I can become a “no-brainer” hire as a Junior Web Developer in under 8 months, no joke. In fact, I wouldn’t feel confident to take up programming at all if it weren’t for the success of the Flatiron School in the last 4 years.&lt;/p&gt;

&lt;p&gt;Computer programming is a huge field encompassing many specialties, technologies and sciences but the basic fundamentals of programming can be learned in the field of Web Development. I’ll be graduating from the Learn.co curriculum in just under a month and I feel like I’ve taken the first step towards an adventurous career which many paths and options. The real celebration will happens once I land a job, but until then…&lt;/p&gt;

&lt;h3 id=&quot;learn-love-code-3&quot;&gt;Learn. Love. Code. &amp;lt;3&lt;/h3&gt;
</description>
        <pubDate>Sun, 19 Jun 2016 12:05:00 -0400</pubDate>
        <link>http://the-widget.github.io/web/development/2016/06/19/why-i-learned-programming.html</link>
        <guid isPermaLink="true">http://the-widget.github.io/web/development/2016/06/19/why-i-learned-programming.html</guid>
        
        
        <category>web</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Rails App w/ jQuery Front-End</title>
        <description>&lt;h2 id=&quot;simple-sign-up-part-2&quot;&gt;Simple Sign Up (part 2)&lt;/h2&gt;
&lt;p&gt;In a previous blog post I covered my first Rails App called Simple Sign Up, which was the Rails Assessment project for &lt;a href=&quot;https://learn.co/&quot;&gt;Learn.co&lt;/a&gt;. In the next section, Rails &amp;amp; Javascript, our assessment project was to take the same Rails App and modify it by implementing jQuery, for the front-end. We were also tasked to create an internal API in which all the jQuery calls would be made to. Sound a little confusing? Let’s break it down in smaller bites.&lt;/p&gt;

&lt;h1 id=&quot;what-is-an-api&quot;&gt;What is an API?&lt;/h1&gt;
&lt;p&gt;In brief, an API (Application Programming Interface) is a resource that allows one system to access the information on another system using standardized protocols. I sometimes visualize an API as a sort of index that you might find at the back of an encyclopedia, which has a wealth of text and images. If you are looking for a specific topic or resource, the index organizes everything, allowing you to find the corresponding pages within seconds. Imagine that someone is trying to create an iPhone app that helps you locate the nearest pizza place. Instead of finding and documenting every pizza place, the easier route would be to use those resources that already exist, such as Foursquare or Yelp. By accessing Yelp’s public API, that wealth of information can be easily accessed and consumed at your disposal.&lt;/p&gt;

&lt;h1 id=&quot;about-jquery&quot;&gt;About jQuery&lt;/h1&gt;
&lt;p&gt;jQuery is a Javascript library (of prewritten functions) which allows programmers to easily manipulate data in fascinating ways. Take Facebook for example: When you create a Post, the page never reloads, but rather seamlessly disappears and reappears on your wall. Or, when you hover the cursor over someone’s name, a small box appears revealing details about this person. This is the magic of Javascript. In this project, the main use of jQuery is in its ability to make AJAX calls to the internal API, select HTML components to manipulate, and display that information on the front-end. In short, this allows the application to access, manipulate and display information without any page redirect.&lt;/p&gt;

&lt;h1 id=&quot;the-process&quot;&gt;The Process&lt;/h1&gt;

&lt;h4 id=&quot;creating-an-internal-api&quot;&gt;Creating an Internal API&lt;/h4&gt;
&lt;p&gt;Thanks to the Rails community, we have an awesome Ruby gem called &lt;code class=&quot;highlighter-rouge&quot;&gt;active-model-serializers&lt;/code&gt; which helps us generate JSON from our object models. Here’s what my Event Serializer looks like: 
&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/serializers/event_serializer.rb&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class EventSerializer &amp;lt; ActiveModel::Serializer
  attributes :id, :title, :description, :date, :start_time, :end_time
  belongs_to :user
  has_many :tasks
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;attributes&lt;/code&gt; keyword allows me to control what data I want serialized into JSON. This simplifies our models which may contain more information than we need. The Event Serializer also accept the keywordsm &lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many&lt;/code&gt;. This will take the serialized data of the related models and nest them in an array. In the screenshot below you will see an array of Tasks, which contain an array of Users.&lt;/p&gt;

&lt;p&gt;Here is the corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; action of the Event Controller
&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/controllers/events_controller.rb&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def show
  @event = Event.find(params[:id])
  respond_to do |format|
    format.html { render :show }
    format.json { render json: @event}
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This choice of &lt;code class=&quot;highlighter-rouge&quot;&gt;|format|&lt;/code&gt; allows me the flexibility to access my standard &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; template, as well as my new JSON resource.
Now, when I navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;events/:id.json&lt;/code&gt; I will see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7480/27596849751_c6197b3449_z.jpg&quot; alt=&quot;JSON formatted view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an organized and simple resource for everything I need to access about my Event. In this JSON format, it is very easy to parse the data and move that information into my views via jQuery&lt;/p&gt;

&lt;h4 id=&quot;javascript-model-objects&quot;&gt;Javascript Model Objects&lt;/h4&gt;

&lt;p&gt;Now that the API is created, I can make an AJAX call to my API and create Javascript Models in order to display the data on the front-end without redirecting the page. Here is a shortened example of what that might look like: &lt;a href=&quot;https://github.com/the-widget/simple-sign-up/blob/master/app/assets/javascripts/events.js&quot;&gt;Actual Source Code on GitHub&lt;/a&gt;
&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/assets/javascripts/event.js&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function Event(id, title, date, description, start_time, end_time, tasks, user){
  this.id = id
  this.title = title
  this.date = date
  this.description = description
  this.start_time = start_time
  this.end_time = end_time
  this.tasks = tasks
  this.user = user //Organizer

  this.display_each_task = function(){
    $.each(this.tasks, function(i, task){
    tasks_html = tasks_html.concat(&quot;&amp;lt;a class=&#39;js-showTask&#39; href=&#39;#&#39;&quot; + &quot;data-id=&quot; + task.id + &quot; data-eventTitle=&quot; + &quot;&#39;eventTitle + &quot;&#39;&quot; + &quot; data-eventId=&quot; + task.event_id + &quot;&amp;gt;&quot; + task.title + &quot;&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&quot;);
    });
  };
};

$.get(&quot;/events/&quot; + eventId + &quot;.json&quot;, function(data) {
  var event = new Event(data[&#39;id&#39;], data[&#39;title&#39;], data[&#39;date&#39;], data[&#39;description&#39;], data[&#39;start_time&#39;], data[&#39;end_time&#39;], data[&#39;tasks&#39;], data[&#39;user&#39;]);
  event.display_each_task();

  $(&#39;.event-tasks&#39;).html(tasks_html);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The first block of code assigns the models attributes to the Event object. Simple enough right?&lt;/p&gt;

&lt;p&gt;The next block of code is the method &lt;code class=&quot;highlighter-rouge&quot;&gt;display_each_task&lt;/code&gt;, which iterates though the array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Event.tasks&lt;/code&gt;, and concatenates the information into a HTML string called &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks_html&lt;/code&gt;. This HTML string can now be applied to the current view through a &lt;a href=&quot;https://api.jquery.com/category/selectors/&quot;&gt;jQuery selector&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The final block of code in this example makes a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; request to the JSON resource (in the above screenshot), creates a new instance of Event, and calls the method &lt;code class=&quot;highlighter-rouge&quot;&gt;display_each_task&lt;/code&gt; to concat that HTML string for this Event. Then the jQuery selector &lt;code class=&quot;highlighter-rouge&quot;&gt;$(&#39;.event-tasks&#39;)&lt;/code&gt; replaces the HTML in the selected &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks_html&lt;/code&gt;, displaying it instantly on the page.
The actual source code for the app is a little more complicated, but follows this basic flow.&lt;/p&gt;

&lt;h1 id=&quot;challenges&quot;&gt;Challenges&lt;/h1&gt;

&lt;h4 id=&quot;permissions&quot;&gt;Permissions&lt;/h4&gt;

&lt;p&gt;One of the challenges I faced was controlling permissions. Using the gem &lt;code class=&quot;highlighter-rouge&quot;&gt;devise&lt;/code&gt; I set up two main User roles, organizers and members. The admin role has complete control over the entire app. Organizers can create, edit and delete Events and Tasks, and Members can sign up for Tasks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app/models/user.rb&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class User &amp;lt; ActiveRecord::Base
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable,
         :omniauthable, :omniauth_providers =&amp;gt; [:facebook]

  enum role: [:admin, :organizer, :member]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;html.erb&lt;/code&gt; files, it is very easy to apply permissions to your views using helper methods.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;% if organizer_permissions? %&amp;gt;
  &amp;lt;%= link_to(&quot;Create New Event&quot;, new_event_path, :id =&amp;gt; &#39;new-event&#39;)%&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I needed to get more creative to implement this same concept in Javascript. I’m sure there are better solutions to achieving this goal, but here is what I decided to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Since the Event &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; page is rendered using an &lt;code class=&quot;highlighter-rouge&quot;&gt;html.erb&lt;/code&gt; file, only an Organizer will have HTML code in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.page-nav&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Using this boolean function (&lt;code class=&quot;highlighter-rouge&quot;&gt;function isEmpty( el ){return !$.trim(el.html());};&lt;/code&gt;) allowed me to test whether or not the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; was empty, and would indicate whether the user was an Organizer or a Member.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (!isEmpty($(&#39;.page-nav&#39;))) {
  $(&#39;.page-nav&#39;).html(eventNav);
;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I used the above function to display the &lt;code class=&quot;highlighter-rouge&quot;&gt;eventNav&lt;/code&gt; only to Organizers, allowing them to edit and delete Events.&lt;/p&gt;

&lt;h4 id=&quot;creating-an-array-of-unique-objects-in-javascript&quot;&gt;Creating An Array of Unique Objects in Javascript&lt;/h4&gt;

&lt;p&gt;In the Event &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; page, I list all the participants(users) for the Event. These participants are recognized by their association with a Task that &lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt; that Event. Since some Users are signed up for multiple Tasks within the same Event, in order to collect a list of unique Users, there is some logic involved. While Ruby’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.uniq&lt;/code&gt; method would work perfectly in this situation, we are dealing with Javascript. Here is how I implemented this logic.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var users = {} //Workers
this.display_each_user = function() {
  $.each(this.tasks, function(i, task){

  // assigning object keys (instead of Array.push) causes an overwrite, making it unique.

    $.each(task.users, function(i, user){ 
      users[user.id] = user.name
    });
  });
  for(var i in users){ // Loops through the keys in &#39;users&#39; to concat
    users_html = users_html.concat(&quot;&amp;lt;li class=&#39;users&#39;&quot; + &quot;data-id=&quot; + i + &quot;&amp;gt;&quot; + users[i])
  };
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The comments made in the above code describe what’s going on, but to restate the logic I will explain it in this way. By iterating two levels deep into the Users of each Task, I assigned the &lt;code class=&quot;highlighter-rouge&quot;&gt;user.id&lt;/code&gt; as the key, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;user.name&lt;/code&gt; as the value &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:user.id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;user.name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. As it iterates through the Users, if the same User appears it will recognize the existing key and update the value rather than creating a new object. Then the last two lines of code iterates through each key in the &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; hash and concats an HTML string which lists the names.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;After completing this project, I feel a sense of satisfaction to see a working result of all the effort I put in. Javascript animations are so nice to see, and they create such a fluid feeling to the web app, an effortless page load. At the same time, I understand that this was just a tiny piece of the pie. My other links do not load via jQuery and break the smooth flow that exists in the &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; pages. For example, if you updated an Event you would not be redirected to the Event via jQuery, but would be redirected to the standard &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; format in the controller. I also feel a need to understand Javascript and Ruby in a deeper way. When I look at the source code, it looks quite crowded and needs to be cleaned up. Overall I had so much fun with this project, and am looking forward to learning Angular JS in the upcoming module.&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Jun 2016 10:15:20 -0400</pubDate>
        <link>http://the-widget.github.io/ruby/rails/javascript/jquery/2016/06/14/rails-w-jquery-assessment.html</link>
        <guid isPermaLink="true">http://the-widget.github.io/ruby/rails/javascript/jquery/2016/06/14/rails-w-jquery-assessment.html</guid>
        
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>javascript</category>
        
        <category>jquery</category>
        
      </item>
    
      <item>
        <title>Rails Web App: Simple Sign Up</title>
        <description>&lt;h4 id=&quot;rails-is-awesome&quot;&gt;Rails is awesome.&lt;/h4&gt;

&lt;p&gt;Rails is a popular MVC framework for programming in Ruby, and it’s just plain great. I haven’t even touched the tip of it’s potential as of yet, but as I learn more about it, I can feel my excitement building.&lt;/p&gt;

&lt;p&gt;As part of the Learn.co curriculum, we are tasked to build a Content Management System, using “RESTful routes”, complex forms and authorization (including login from an outside source ie. Facebook, Google, etc.&lt;/p&gt;

&lt;p&gt;This is my first self-created Rails app, and it’s called Simple Sign Up. It’s based off of the website SignUpGenious.com which provides a solution for organizational management. In it’s current stage, it is not very useful, but nonetheless it has allowed me to understand the basic prinicples of Rails.&lt;/p&gt;

&lt;p&gt;The idea is that it is used by an organization that plans various events, to recruit and organize workers or volunteers to fill necessary job positions. For example: Let’s say you are organizing an 8 hour wedding expo. You may require people in charge of parking, serving food or beverages, hosts, and a clean up crew. This app allows an organizer to create tasks, and for workers/volunteers to sign up for various tasks.&lt;/p&gt;

&lt;p&gt;My first task was to complete the models and the relationships that they have with one another. I built a Users, Events and Tasks model. The tricky part of this relationship is that there are two kinds of users, Organizers and Volunteers. A handy gem called ‘devise’ makes the job a little easier. Devise lets you create ‘roles’ which you can then use to control the flow of information presented to each user. For example, when an Organizer goes to the Tasks page, there will be a link to ‘Create New Task’. Whereas, if a volunteer visits the same page, there will be a link to ‘Sign Up For This Task’.&lt;/p&gt;

&lt;p&gt;I also wanted to implement a feature that allowed both Organizers and Volunteers to see how many positions have been filled for Tasks, and how many more positions needed to be filled for Events. This would give people a sense of where there is more ‘need’ for help. This was accomplished with a few simple instance methods (that calculated the amount of task positions vs. the amount of users who signed up for them), and a css selector which marked the text either green or red.&lt;/p&gt;

&lt;p&gt;The most difficult part of this assignment was implementing Oauth for Facebook. I learned that a careful and thoughtful review of the documentation is essential for setting it up. So often we want a quick fix or setup, but that mentality ended up costing me so much time it’s painful to think about.  Better to have a good understanding of the architecture of a gem before implementing it.&lt;/p&gt;

&lt;p&gt;There were many more features I wanted to implement, but for the sake of my studying and urgent need to find a job, I decided to move forward in my Coding Journey.&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Jun 2016 10:25:20 -0400</pubDate>
        <link>http://the-widget.github.io/rails/ruby/2016/06/03/rails-assessment.html</link>
        <guid isPermaLink="true">http://the-widget.github.io/rails/ruby/2016/06/03/rails-assessment.html</guid>
        
        
        <category>rails</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Sinatra Web App: Bhagavad-Gita As It Is Community Index</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1519/26007769742_bc1a5b7908.jpg&quot; alt=&quot;alt-text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This project was done as a final assessment in Learn.co’s Fullstack Web Development course for the Sinatra section. We were tasked to create CRUD (Create, Read, Update, Delete) app of our choice. CRUD apps are sometimes referred to as Content Management Systems. I decided to make a community index for the world renouned book &lt;em&gt;“Bhagavad-Gita As It Is”&lt;/em&gt;, by &lt;em&gt;His Divine Grace A.C. Bhaktivedanta Swami Prabhupada&lt;/em&gt;. I was deeply transformed by the study of this book, and felt inspired to implement it into my study of programming. I’ve found that by combining the things you already enjoy with new things you are learning, it makes the process so much more engaging.&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning:&lt;/h2&gt;
&lt;p&gt;Because this book requires a lifetime of study to actually absorb and implement it’s teachings, it would be useful to create a sort of quick reference guide based on topics. It would also be nice if the information was accessible to everyone, even if you don’t create a login. Here is my basic plan…&lt;/p&gt;

&lt;p&gt;This program will allow Users to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login.&lt;/li&gt;
  &lt;li&gt;Create index’s defined by a Topic name, which references a Verse’s content.&lt;/li&gt;
  &lt;li&gt;View index’s from all Users.&lt;/li&gt;
  &lt;li&gt;Edit any attribute of an index.&lt;/li&gt;
  &lt;li&gt;Be restricted from adding a Topic or Verse that was already made.&lt;/li&gt;
  &lt;li&gt;Logout.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Non-registered Users will be able to view all the data on the website, but will not be able to contribute in any way. (Even if they slap on ‘/new’ or ‘/edit’ to the base of the URL)&lt;/p&gt;

&lt;h3 id=&quot;has-many-to-has-many-relationships&quot;&gt;Has Many to Has Many Relationships&lt;/h3&gt;
&lt;p&gt;The relationships between the classes will be as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User has many Topics&lt;/li&gt;
  &lt;li&gt;Topic has many Users&lt;/li&gt;
  &lt;li&gt;Topic has many Verses&lt;/li&gt;
  &lt;li&gt;Verse has many Topics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will require two Join Tables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UserTopics&lt;/li&gt;
  &lt;li&gt;TopicVerses&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;it-isnt-as-simple-as-it-sounds&quot;&gt;It Isn’t As Simple As It Sounds&lt;/h2&gt;
&lt;p&gt;Although the concept of this program is simple enough to understand, to get a computer to comprehend everything takes a load of work. My first hurdle came when I needed the User, Topic and Verse all to associate with each other upon creation. The next challenge was allowing every detail to be editted, and creating an edit form that shows you the current setup of your object. I learned a few tricks along the way. Here are a few:&lt;/p&gt;

&lt;h3 id=&quot;disappearing-buttons&quot;&gt;Disappearing Buttons&lt;/h3&gt;
&lt;p&gt;Want certain buttons to appear only when you want them to? Simply use a clever line of &lt;strong&gt;erb&lt;/strong&gt; such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;&amp;lt;%= is_logged_in ? &#39;submit&#39; : &#39;hidden&#39; %&amp;gt;&quot; value=&quot;Edit Topic&quot;&amp;gt;&lt;/code&gt;
This makes your &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&lt;/code&gt; conditional based on the controller’s helper method &lt;code class=&quot;highlighter-rouge&quot;&gt;#is_logged_in&lt;/code&gt; which is simply:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; def is_logged_in
    !!session[:user_id]
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;diplaying-error-messages&quot;&gt;Diplaying Error Messages&lt;/h3&gt;
&lt;p&gt;I used these two ways for displaying error messages:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;locals: method&lt;/strong&gt; - 
You can plug this in to your controller action.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;erb :&quot;users/login&quot;, locals: {message: &quot;Invalid username or password! Please try again.&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this in your views.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;% unless locals.empty? %&amp;gt;
  &amp;lt;%= message %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;redirect ‘/’ method&lt;/strong&gt;
Plug this in to your controller action.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;message = &quot;* You Must Be Logged In To Contribute*&quot;
redirect &quot;/whatever_page?message=#{message}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this in your views.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%= @message %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;pop-out-window&quot;&gt;Pop Out Window&lt;/h3&gt;
&lt;p&gt;This feature gives you a clickable link which reveals a window into another website. For example: look at the picture below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1579/25494709784_be29dbe9e5.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You see the link on the very bottom?  If you click that link, this opens in the same page:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1522/25826633940_3503ebf531.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll paste the code that I used for this feature below, and you can decode where to place your own information. It’s all HTML, no CSS so it’s a bit bulky, but it works!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;#&quot; id=&quot;show_id&quot; onclick=&quot;document.getElementById(&#39;spoiler_id&#39;).style.display=&#39;&#39;; document.getElementById(&#39;show_id&#39;).style.display=&#39;none&#39;;&quot; class=&quot;link&quot;&amp;gt;[Full View w/ Sanskrit, English Diacritics, Word-for-Word Translation &amp;amp; Purport]&amp;lt;/a&amp;gt;
&amp;lt;span id=&quot;spoiler_id&quot; style=&quot;display: none&quot;&amp;gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;document.getElementById(&#39;spoiler_id&#39;).style.display=&#39;none&#39;; document.getElementById(&#39;show_id&#39;).style.display=&#39;&#39;;&quot; class=&quot;link&quot;&amp;gt;[Hide]&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;div id=&quot;purport&quot;&amp;gt; 
  &amp;lt;object type=&quot;text/html&quot; data=&quot;http://www.vedabase.com/en/bg/&amp;lt;%=@verse.chapter%&amp;gt;/&amp;lt;%=@verse.verse%&amp;gt;&quot; width=&quot;800px&quot; height=&quot;800px&quot; style=&quot;overflow:auto;border:5px ridge blue&quot;&amp;gt;&amp;lt;/object&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;requesting-authorization&quot;&gt;Requesting Authorization&lt;/h3&gt;

&lt;p&gt;I created a permissions model which would restrict users from editting information until they received permission and were added to a list of authorized users. The only unrealistic part about this model is that once you click the “Request Permission…” button, you are immediately granted access. In a real-world situation, I would implement a system that sends out an email to the Administrator, allowing him to either Accept or Deny the request. This opened another set of challenges, which was to create a system that checked the User’s status in relation to many objects within the program.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;This project was very fun and challenging for me. Although I may have spent a little more time than I had wanted to, the experience of riding the waves over several days proved to me that I actually like this stuff. It also revealed to me why Web Developers have to work in teams. There is just too many things to think about to tackle it on your own. I also found that no matter how much pre-planning I tried to do, I always ended up tackling a new feature that I never planned to from the start. Regardless, the pre-planning probably saved me hours of time in the initial setup. Now that this is over, it’s on to Ruby on Rails!!&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Mar 2016 19:20:20 -0400</pubDate>
        <link>http://the-widget.github.io/sinatra/ruby/app/2016/03/27/sinatra-assessment.html</link>
        <guid isPermaLink="true">http://the-widget.github.io/sinatra/ruby/app/2016/03/27/sinatra-assessment.html</guid>
        
        
        <category>sinatra</category>
        
        <category>ruby</category>
        
        <category>app</category>
        
      </item>
    
      <item>
        <title>Building A CLI Gem: Making of RunSwimHike NYC</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1590/25234838110_ef39acc1fb.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the Final Projects in Learn.co’s Object Orientation Module is to build your own CLI Gem. We are required to publish our Gem on RubyGems and make it available for anyone to try. Feel free to check out the source code here: &lt;a href=&quot;https://github.com/the-widget/run-swim-hike-nyc&quot;&gt;RunSwimHike NYC&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;research-phase&quot;&gt;&lt;strong&gt;Research Phase:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Previous to this project we studied Object Oriented Programming and site scraping using Nokogiri. I heard fellow students complaining about their gems quickly ‘breaking’ due to changes in the website, so I wanted to find a relatively stable source. I remember hearing about NYC Open Data which provides over 1300 data sets on everything from public toilets to real-time traffic speed detectors. I went through several dozens of data sets until I decided I would settle on places to get some exercise. Soon after, I decided on the name and subject for my CLI gem. “RunSwimHike NYC”. NYC Open Data provided these data sets in ‘xml’ format, which I had no previous experience of scraping, but it seemed easy enough.&lt;/p&gt;

&lt;h2 id=&quot;planning-phase&quot;&gt;&lt;strong&gt;Planning Phase:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I wanted this gem to be flexible, organized and useful. Since there was a lot of information to deal with, I wanted to divide the menus up into three main categories: naturally… Run , Swim and Hike. After that was established, the user should pick one of five boroughs. After viewing a numbered list of names and locations, the user should be able to get more information about the facility and have direct access to a Google Maps listing. Here’s a basic overview of the workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Welcome!
    &lt;ul&gt;
      &lt;li&gt;Run&lt;/li&gt;
      &lt;li&gt;Swim (should offer Indoor/Outdoor options)&lt;/li&gt;
      &lt;li&gt;Hike
        &lt;ul&gt;
          &lt;li&gt;Bronx&lt;/li&gt;
          &lt;li&gt;Brooklyn&lt;/li&gt;
          &lt;li&gt;Manhattan&lt;/li&gt;
          &lt;li&gt;Queens&lt;/li&gt;
          &lt;li&gt;Staten Island
            &lt;ul&gt;
              &lt;li&gt;:facility list:&lt;/li&gt;
              &lt;li&gt;:individual facility info:&lt;/li&gt;
              &lt;li&gt;‘open a Google Map listing’&lt;/li&gt;
              &lt;li&gt;‘go back to facility list’&lt;/li&gt;
              &lt;li&gt;‘reset program’&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;‘option to quit/reset at anytime’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to create a main CLI class, and a seperate class for each activity along with it’s own scraper class.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CLI
    &lt;ul&gt;
      &lt;li&gt;Run Scraper&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Run Class&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Swim Scraper&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Swim Class&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Hike Scraper&lt;/li&gt;
      &lt;li&gt;Hike Class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategy&quot;&gt;&lt;strong&gt;Strategy:&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get &lt;strong&gt;everything&lt;/strong&gt; working with the Run/Run Scraper class including menus and all features. Then, copy and apply to the next two subjects. This strategy really paid off in the end, and completing the last two sections was like a breeze.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scrape, collect, and create instances of all objects upon the user’s choice of Run, Swim or Hike. Iterate through an array of instances to display information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use class methods to allow all instances to be iterated over easily.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;&lt;strong&gt;Lessons Learned:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After figuring out how to parse xml files, my biggest challenge was designing a system that allowed the user to return to a previous window. This was especially challenging for the Swim class, because I wanted to offer the option for Indoor/Outdoor pools, which meant I needed to interate through all the instances of Swim again. Here were some takeaways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pre-planning goes a &lt;strong&gt;long&lt;/strong&gt; way.
    &lt;ul&gt;
      &lt;li&gt;Put yourself in the shoes of the user. Become the user and see what function you would like to see. Try to predict what would annoy/please you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Commit more frequently.
    &lt;ul&gt;
      &lt;li&gt;I found myself getting so caught up in progamming that I wasn’t committing until a huge chunk of the program was finished. At one point, my MacBook Air froze up and I did a hard reset. Luckily, none of my progress was lost, but luck doesn’t always take your side.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Take more notes along the way.
    &lt;ul&gt;
      &lt;li&gt;There’s a huge amount of learning that happens during the programming process. If these valuable lessons can documented, you can further solidify your own understanding and share it with others.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;little-extras&quot;&gt;&lt;strong&gt;Little Extras:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Adding little personal touches to a CLI program can make it feel more human. Here were a few extra features that I incorporated into this program:&lt;/p&gt;

&lt;h3 id=&quot;spinny&quot;&gt;Spinny&lt;/h3&gt;
&lt;p&gt;This is a spinning icon that runs in your cursor space while you wait for information to load. Here is the source code for that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def self.spinny  
n=0
a=[&quot;-&quot;,&quot;\\&quot;,&quot;|&quot;,&quot;/&quot;].cycle do |a|
  print a
  print &quot;\b&quot;
  n+=1
  sleep 0.1
  break if (n % 6).zero?
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;sleep&quot;&gt;Sleep&lt;/h3&gt;
&lt;p&gt;I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; keyword to mimick loading time, but I used it so allow the user to see the spinny, as well as to animate a list of parks being printed. Instead of it just appearing suddenly, it puts 4/100ths of a second between each &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt;. Here is an example from my Run class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def self.display_borough(borough)
spinny
index = 0
puts &quot; \nHere are the Running Tracks in #{borough}: \n &quot;
spinny
parks.each do |track|
  if track.borough == borough
    parks &amp;lt;&amp;lt; track unless parks.include?(track)
    puts &quot;#{index+1}. #{track.name} - #{track.location}&quot;
    index += 1
    sleep(0.04)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;farewell&quot;&gt;Farewell&lt;/h3&gt;
&lt;p&gt;This bids the user farewell with a unique message before quitting the program. I set a class variable equal to an array of farewell messages, and used the &lt;code class=&quot;highlighter-rouge&quot;&gt;.sample&lt;/code&gt; method to choose one at random. Here is the code for my &lt;code class=&quot;highlighter-rouge&quot;&gt;quit&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @@farewell = [&quot;Have a nice day!&quot;, &quot;Take care of yourself!&quot;, &quot;You&#39;ll never regret some good excercise!&quot;, &quot;Have fun!&quot;, &quot;Thanks for checking us out!&quot;, &quot;Keep running, swimming and hiking!&quot;, &quot;:)&quot;]

  def self.quit
    puts &quot; \n&quot;
    abort(&quot;#{@@farewell.sample} \n &quot;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 15:18:20 -0500</pubDate>
        <link>http://the-widget.github.io/ruby/gem/cli/2016/02/29/cli-gem-project.html</link>
        <guid isPermaLink="true">http://the-widget.github.io/ruby/gem/cli/2016/02/29/cli-gem-project.html</guid>
        
        
        <category>ruby</category>
        
        <category>gem</category>
        
        <category>cli</category>
        
      </item>
    
  </channel>
</rss>
