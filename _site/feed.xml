<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Coding Journey</title>
    <description>This blog is meant to document my personal experience of learning how to  code with no previous experience..
</description>
    <link>http://the-widget.github.io/</link>
    <atom:link href="http://the-widget.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 03 Jun 2016 10:01:04 -0400</pubDate>
    <lastBuildDate>Fri, 03 Jun 2016 10:01:04 -0400</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Sinatra Web App: Bhagavad-Gita As It Is Community Index</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1519/26007769742_bc1a5b7908.jpg&quot; alt=&quot;alt-text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This project was done as a final assessment in Learn.co’s Fullstack Web Development course for the Sinatra section. We were tasked to create CRUD (Create, Read, Update, Delete) app of our choice. CRUD apps are sometimes referred to as Content Management Systems. I decided to make a community index for the world renouned book &lt;em&gt;“Bhagavad-Gita As It Is”&lt;/em&gt;, by &lt;em&gt;His Divine Grace A.C. Bhaktivedanta Swami Prabhupada&lt;/em&gt;. I was deeply transformed by the study of this book, and felt inspired to implement it into my study of programming. I’ve found that by combining the things you already enjoy with new things you are learning, it makes the process so much more engaging.&lt;/p&gt;

&lt;h2 id=&quot;planning&quot;&gt;Planning:&lt;/h2&gt;
&lt;p&gt;Because this book requires a lifetime of study to actually absorb and implement it’s teachings, it would be useful to create a sort of quick reference guide based on topics. It would also be nice if the information was accessible to everyone, even if you don’t create a login. Here is my basic plan…&lt;/p&gt;

&lt;p&gt;This program will allow Users to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login.&lt;/li&gt;
  &lt;li&gt;Create index’s defined by a Topic name, which references a Verse’s content.&lt;/li&gt;
  &lt;li&gt;View index’s from all Users.&lt;/li&gt;
  &lt;li&gt;Edit any attribute of an index.&lt;/li&gt;
  &lt;li&gt;Be restricted from adding a Topic or Verse that was already made.&lt;/li&gt;
  &lt;li&gt;Logout.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Non-registered Users will be able to view all the data on the website, but will not be able to contribute in any way. (Even if they slap on ‘/new’ or ‘/edit’ to the base of the URL)&lt;/p&gt;

&lt;h3 id=&quot;has-many-to-has-many-relationships&quot;&gt;Has Many to Has Many Relationships&lt;/h3&gt;
&lt;p&gt;The relationships between the classes will be as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User has many Topics&lt;/li&gt;
  &lt;li&gt;Topic has many Users&lt;/li&gt;
  &lt;li&gt;Topic has many Verses&lt;/li&gt;
  &lt;li&gt;Verse has many Topics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will require two Join Tables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UserTopics&lt;/li&gt;
  &lt;li&gt;TopicVerses&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;it-isnt-as-simple-as-it-sounds&quot;&gt;It Isn’t As Simple As It Sounds&lt;/h2&gt;
&lt;p&gt;Although the concept of this program is simple enough to understand, to get a computer to comprehend everything takes a load of work. My first hurdle came when I needed the User, Topic and Verse all to associate with each other upon creation. The next challenge was allowing every detail to be editted, and creating an edit form that shows you the current setup of your object. I learned a few tricks along the way. Here are a few:&lt;/p&gt;

&lt;h3 id=&quot;disappearing-buttons&quot;&gt;Disappearing Buttons&lt;/h3&gt;
&lt;p&gt;Want certain buttons to appear only when you want them to? Simply use a clever line of &lt;strong&gt;erb&lt;/strong&gt; such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;&amp;lt;%= is_logged_in ? &#39;submit&#39; : &#39;hidden&#39; %&amp;gt;&quot; value=&quot;Edit Topic&quot;&amp;gt;&lt;/code&gt;
This makes your &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&lt;/code&gt; conditional based on the controller’s helper method &lt;code class=&quot;highlighter-rouge&quot;&gt;#is_logged_in&lt;/code&gt; which is simply:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; def is_logged_in
    !!session[:user_id]
 end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;diplaying-error-messages&quot;&gt;Diplaying Error Messages&lt;/h3&gt;
&lt;p&gt;I used these two ways for displaying error messages:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;locals: method&lt;/strong&gt; - 
You can plug this in to your controller action.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;erb :&quot;users/login&quot;, locals: {message: &quot;Invalid username or password! Please try again.&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this in your views.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;% unless locals.empty? %&amp;gt;
  &amp;lt;%= message %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;redirect ‘/’ method&lt;/strong&gt;
Plug this in to your controller action.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;message = &quot;* You Must Be Logged In To Contribute*&quot;
redirect &quot;/whatever_page?message=#{message}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And this in your views.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;%= @message %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;pop-out-window&quot;&gt;Pop Out Window&lt;/h3&gt;
&lt;p&gt;This feature gives you a clickable link which reveals a window into another website. For example: look at the picture below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1579/25494709784_be29dbe9e5.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You see the link on the very bottom?  If you click that link, this opens in the same page:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1522/25826633940_3503ebf531.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll paste the code that I used for this feature below, and you can decode where to place your own information. It’s all HTML, no CSS so it’s a bit bulky, but it works!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;#&quot; id=&quot;show_id&quot; onclick=&quot;document.getElementById(&#39;spoiler_id&#39;).style.display=&#39;&#39;; document.getElementById(&#39;show_id&#39;).style.display=&#39;none&#39;;&quot; class=&quot;link&quot;&amp;gt;[Full View w/ Sanskrit, English Diacritics, Word-for-Word Translation &amp;amp; Purport]&amp;lt;/a&amp;gt;
&amp;lt;span id=&quot;spoiler_id&quot; style=&quot;display: none&quot;&amp;gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;document.getElementById(&#39;spoiler_id&#39;).style.display=&#39;none&#39;; document.getElementById(&#39;show_id&#39;).style.display=&#39;&#39;;&quot; class=&quot;link&quot;&amp;gt;[Hide]&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;div id=&quot;purport&quot;&amp;gt; 
  &amp;lt;object type=&quot;text/html&quot; data=&quot;http://www.vedabase.com/en/bg/&amp;lt;%=@verse.chapter%&amp;gt;/&amp;lt;%=@verse.verse%&amp;gt;&quot; width=&quot;800px&quot; height=&quot;800px&quot; style=&quot;overflow:auto;border:5px ridge blue&quot;&amp;gt;&amp;lt;/object&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;requesting-authorization&quot;&gt;Requesting Authorization&lt;/h3&gt;

&lt;p&gt;I created a permissions model which would restrict users from editting information until they received permission and were added to a list of authorized users. The only unrealistic part about this model is that once you click the “Request Permission…” button, you are immediately granted access. In a real-world situation, I would implement a system that sends out an email to the Administrator, allowing him to either Accept or Deny the request. This opened another set of challenges, which was to create a system that checked the User’s status in relation to many objects within the program.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;This project was very fun and challenging for me. Although I may have spent a little more time than I had wanted to, the experience of riding the waves over several days proved to me that I actually like this stuff. It also revealed to me why Web Developers have to work in teams. There is just too many things to think about to tackle it on your own. I also found that no matter how much pre-planning I tried to do, I always ended up tackling a new feature that I never planned to from the start. Regardless, the pre-planning probably saved me hours of time in the initial setup. Now that this is over, it’s on to Ruby on Rails!!&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Mar 2016 19:20:20 -0400</pubDate>
        <link>http://the-widget.github.io/sinatra/ruby/app/2016/03/27/sinatra-assessment-project.html</link>
        <guid isPermaLink="true">http://the-widget.github.io/sinatra/ruby/app/2016/03/27/sinatra-assessment-project.html</guid>
        
        
        <category>sinatra</category>
        
        <category>ruby</category>
        
        <category>app</category>
        
      </item>
    
      <item>
        <title>Building A CLI Gem: Making of RunSwimHike NYC</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1590/25234838110_ef39acc1fb.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the Final Projects in Learn.co’s Object Orientation Module is to build your own CLI Gem. We are required to publish our Gem on RubyGems and make it available for anyone to try. Feel free to check out the source code here: &lt;a href=&quot;https://github.com/the-widget/run-swim-hike-nyc&quot;&gt;RunSwimHike NYC&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;research-phase&quot;&gt;&lt;strong&gt;Research Phase:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Previous to this project we studied Object Oriented Programming and site scraping using Nokogiri. I heard fellow students complaining about their gems quickly ‘breaking’ due to changes in the website, so I wanted to find a relatively stable source. I remember hearing about NYC Open Data which provides over 1300 data sets on everything from public toilets to real-time traffic speed detectors. I went through several dozens of data sets until I decided I would settle on places to get some exercise. Soon after, I decided on the name and subject for my CLI gem. “RunSwimHike NYC”. NYC Open Data provided these data sets in ‘xml’ format, which I had no previous experience of scraping, but it seemed easy enough.&lt;/p&gt;

&lt;h2 id=&quot;planning-phase&quot;&gt;&lt;strong&gt;Planning Phase:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;I wanted this gem to be flexible, organized and useful. Since there was a lot of information to deal with, I wanted to divide the menus up into three main categories: naturally… Run , Swim and Hike. After that was established, the user should pick one of five boroughs. After viewing a numbered list of names and locations, the user should be able to get more information about the facility and have direct access to a Google Maps listing. Here’s a basic overview of the workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Welcome!
    &lt;ul&gt;
      &lt;li&gt;Run&lt;/li&gt;
      &lt;li&gt;Swim (should offer Indoor/Outdoor options)&lt;/li&gt;
      &lt;li&gt;Hike
        &lt;ul&gt;
          &lt;li&gt;Bronx&lt;/li&gt;
          &lt;li&gt;Brooklyn&lt;/li&gt;
          &lt;li&gt;Manhattan&lt;/li&gt;
          &lt;li&gt;Queens&lt;/li&gt;
          &lt;li&gt;Staten Island
            &lt;ul&gt;
              &lt;li&gt;:facility list:&lt;/li&gt;
              &lt;li&gt;:individual facility info:&lt;/li&gt;
              &lt;li&gt;‘open a Google Map listing’&lt;/li&gt;
              &lt;li&gt;‘go back to facility list’&lt;/li&gt;
              &lt;li&gt;‘reset program’&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;‘option to quit/reset at anytime’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to create a main CLI class, and a seperate class for each activity along with it’s own scraper class.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CLI
    &lt;ul&gt;
      &lt;li&gt;Run Scraper&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Run Class&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Swim Scraper&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Swim Class&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Hike Scraper&lt;/li&gt;
      &lt;li&gt;Hike Class&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategy&quot;&gt;&lt;strong&gt;Strategy:&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get &lt;strong&gt;everything&lt;/strong&gt; working with the Run/Run Scraper class including menus and all features. Then, copy and apply to the next two subjects. This strategy really paid off in the end, and completing the last two sections was like a breeze.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scrape, collect, and create instances of all objects upon the user’s choice of Run, Swim or Hike. Iterate through an array of instances to display information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use class methods to allow all instances to be iterated over easily.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;&lt;strong&gt;Lessons Learned:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After figuring out how to parse xml files, my biggest challenge was designing a system that allowed the user to return to a previous window. This was especially challenging for the Swim class, because I wanted to offer the option for Indoor/Outdoor pools, which meant I needed to interate through all the instances of Swim again. Here were some takeaways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pre-planning goes a &lt;strong&gt;long&lt;/strong&gt; way.
    &lt;ul&gt;
      &lt;li&gt;Put yourself in the shoes of the user. Become the user and see what function you would like to see. Try to predict what would annoy/please you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Commit more frequently.
    &lt;ul&gt;
      &lt;li&gt;I found myself getting so caught up in progamming that I wasn’t committing until a huge chunk of the program was finished. At one point, my MacBook Air froze up and I did a hard reset. Luckily, none of my progress was lost, but luck doesn’t always take your side.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Take more notes along the way.
    &lt;ul&gt;
      &lt;li&gt;There’s a huge amount of learning that happens during the programming process. If these valuable lessons can documented, you can further solidify your own understanding and share it with others.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;little-extras&quot;&gt;&lt;strong&gt;Little Extras:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Adding little personal touches to a CLI program can make it feel more human. Here were a few extra features that I incorporated into this program:&lt;/p&gt;

&lt;h3 id=&quot;spinny&quot;&gt;Spinny&lt;/h3&gt;
&lt;p&gt;This is a spinning icon that runs in your cursor space while you wait for information to load. Here is the source code for that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def self.spinny  
n=0
a=[&quot;-&quot;,&quot;\\&quot;,&quot;|&quot;,&quot;/&quot;].cycle do |a|
  print a
  print &quot;\b&quot;
  n+=1
  sleep 0.1
  break if (n % 6).zero?
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;sleep&quot;&gt;Sleep&lt;/h3&gt;
&lt;p&gt;I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; keyword to mimick loading time, but I used it so allow the user to see the spinny, as well as to animate a list of parks being printed. Instead of it just appearing suddenly, it puts 4/100ths of a second between each &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt;. Here is an example from my Run class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def self.display_borough(borough)
spinny
index = 0
puts &quot; \nHere are the Running Tracks in #{borough}: \n &quot;
spinny
parks.each do |track|
  if track.borough == borough
    parks &amp;lt;&amp;lt; track unless parks.include?(track)
    puts &quot;#{index+1}. #{track.name} - #{track.location}&quot;
    index += 1
    sleep(0.04)
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;farewell&quot;&gt;Farewell&lt;/h3&gt;
&lt;p&gt;This bids the user farewell with a unique message before quitting the program. I set a class variable equal to an array of farewell messages, and used the &lt;code class=&quot;highlighter-rouge&quot;&gt;.sample&lt;/code&gt; method to choose one at random. Here is the code for my &lt;code class=&quot;highlighter-rouge&quot;&gt;quit&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @@farewell = [&quot;Have a nice day!&quot;, &quot;Take care of yourself!&quot;, &quot;You&#39;ll never regret some good excercise!&quot;, &quot;Have fun!&quot;, &quot;Thanks for checking us out!&quot;, &quot;Keep running, swimming and hiking!&quot;, &quot;:)&quot;]

  def self.quit
    puts &quot; \n&quot;
    abort(&quot;#{@@farewell.sample} \n &quot;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 15:18:20 -0500</pubDate>
        <link>http://the-widget.github.io/ruby/gem/cli/2016/02/29/building-cli-gem.html</link>
        <guid isPermaLink="true">http://the-widget.github.io/ruby/gem/cli/2016/02/29/building-cli-gem.html</guid>
        
        
        <category>ruby</category>
        
        <category>gem</category>
        
        <category>cli</category>
        
      </item>
    
  </channel>
</rss>
